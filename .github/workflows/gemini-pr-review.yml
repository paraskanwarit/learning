name: 'Gemini PR Review'

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  id-token: write  # Required for Workload Identity Federation

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Run Gemini PR Review'
        id: gemini-review
        uses: google-github-actions/run-gemini-cli@v0.1.10
        with:
          prompt: |
            You are a senior software engineer performing a code review. 
            Analyze the changes in this pull request and provide:
            1. A summary of the changes
            2. Code quality assessment
            3. Security considerations
            4. Suggestions for improvement
            5. Overall recommendation (approve/request changes)
            
            Focus on:
            - Code correctness and logic
            - Performance implications
            - Security vulnerabilities
            - Code style and maintainability
            - Test coverage
          settings: |
            {
              "model": "gemini-1.5-pro",
              "temperature": 0.1,
              "max_tokens": 4000
            }
          gcp_project_id: ${{ vars.GOOGLE_CLOUD_PROJECT }}
          gcp_location: ${{ vars.GOOGLE_CLOUD_LOCATION }}
          gcp_workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER }}
          gcp_service_account: ${{ vars.SERVICE_ACCOUNT_EMAIL }}
          
      - name: 'Comment review results'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // Check if we already commented
            const hasCommented = comments.some(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ¤– Gemini Code Review')
            );
            
            if (!hasCommented) {
              const summary = '${{ steps.gemini-review.outputs.summary }}';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ¤– Gemini Code Review\n\n${summary}\n\n---\n*This review was automatically generated by Gemini CLI*`
              });
            } 